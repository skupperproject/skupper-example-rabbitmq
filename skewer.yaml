title: Accessing a RabbitMQ message broker using Skupper
subtitle: Use public cloud resources to process data from an on-prem message broker
overview: |
  This example shows how you can use Skupper to access a RabbitMQ
  broker at a remote site without exposing it to the public internet.

  It contains two services:

  * A RabbitMQ broker running in a private data center.  The broker
    has a queue named "notifications".

  * A RabbitMQ client running in the public cloud.  It sends 10
    messages to "notifications" and then receives them back.

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.
sites:
  public:
    title: Public
    platform: kubernetes
    namespace: public
    env:
      KUBECONFIG: ~/.kube/config-public
  private:
    title: Private
    platform: kubernetes
    namespace: private
    env:
      KUBECONFIG: ~/.kube/config-private
steps:
  - standard: install_the_skupper_command_line_tool
  - standard: kubernetes/set_up_your_namespaces
  - title: Deploy the message broker
    preamble: |
      In Private, use the `kubectl apply` command to install the
      broker.
    commands:
      private:
        - run: kubectl apply -f broker
          output: deployment.apps/broker created
  - standard: kubernetes/create_your_sites
  - standard: kubernetes/link_your_sites
  - title: Expose the message broker
    preamble: |
      In Private, use `skupper expose` to expose the broker on the
      Skupper network.

      Then, in Public, use `kubectl get service/broker` to check that
      the `broker` service appears after a moment.
    commands:
      private:
        - await_resource: deployment/broker
        - run: skupper expose deployment/broker --port 5672
          output: deployment broker exposed as broker
      public:
        - await_resource: service/broker
        - run: kubectl get service/broker
          output: |
            NAME     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
            broker   ClusterIP   10.100.58.95   <none>        5672/TCP   2s
  - title: Run the client
    preamble: |
      In Public, use `kubectl run` to run the client.
    commands:
      public:
        - await_resource: service/broker
        - run: kubectl run client --attach --rm --restart Never --image quay.io/skupper/rabbitmq-example-client -- broker 5672
          output: |
            Sent message 1
            Sent message 2
            Sent message 3
            Sent message 4
            Sent message 5
            Sent message 6
            Sent message 7
            Sent message 8
            Sent message 9
            Sent message 10
            Received message 1
            Received message 2
            Received message 3
            Received message 4
            Received message 5
            Received message 6
            Received message 7
            Received message 8
            Received message 9
            Received message 10
            pod "client" deleted
  - standard: cleaning_up
    commands:
      private:
        - run: kubectl delete -f broker
        - run: skupper delete
      public:
        - run: skupper delete
