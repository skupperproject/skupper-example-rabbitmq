title: Accessing a RabbitMQ message broker using Skupper
subtitle: Use public cloud resources to process data from a private message broker
github_actions_url: https://github.com/skupperproject/skupper-example-rabbitmq/actions/workflows/main.yaml
overview: |
  This example is a simple messaging application that shows how you
  can use Skupper to access an RabbitMQ broker at a remote site
  without exposing it to the public internet.

  It contains two services:

  * An RabbitMQ broker running in a private data center.  The broker
    has a queue named "notifications".

  * An AMQP client running in the public cloud.  It sends 10 messages
    to "notifications" and then receives them back.

  The example uses two Kubernetes namespaces, "private" and "public",
  to represent the private data center and public cloud.

# For the broker, this example uses the [Apache RabbitMQ
# Artemis][artemis] image from [ArtemisCloud.io][artemiscloud].  The
# client is a simple [Quarkus][quarkus] application. XXXXXXXXXXXXXXXXXXXXXx

# [artemis]: https://activemq.apache.org/components/artemis/
# [artemiscloud]: https://artemiscloud.io/
# [quarkus]: https://quarkus.io/
sites:
  public:
    kubeconfig: ~/.kube/config-public
    namespace: public
  private:
    kubeconfig: ~/.kube/config-private
    namespace: private
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - standard: install_skupper_in_your_namespaces
  - standard: check_the_status_of_your_namespaces
  - standard: link_your_namespaces
  - title: Deploy the message broker
    preamble: |
      In the private namespace, use the `kubectl apply` command to
      install the broker.
    commands:
      private:
        - run: kubectl apply -f broker
          output: deployment.apps/broker created
  - title: Expose the message broker
    preamble: |
      In the private namespace, use `skupper expose` to expose the
      broker on the Skupper network.

      Then, in the public namespace, use `kubectl get service/broker`
      to check that the service appears after a moment.
    commands:
      private:
        - await: deployment/broker
        - run: skupper expose deployment/broker --port 5672
          output: deployment broker exposed as broker
      public:
        - await: service/broker
        - run: kubectl get service/broker
          output: |
            NAME     TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
            broker   ClusterIP   10.100.58.95   <none>        5672/TCP   2s
  - title: Run the client
    preamble: |
      In the public namespace, use `kubectl run` to run the client.
    commands:
      public:
        - await: service/broker
        - run: kubectl run client --attach --rm --restart Never --image quay.io/skupper/rabbitmq-example-client -- broker 5672
          output: |
            XXX
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      private:
        - run: kubectl delete -f broker
        - run: skupper delete
      public:
        - run: skupper delete
